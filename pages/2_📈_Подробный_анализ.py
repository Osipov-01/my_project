#–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_predict
import numpy as np
from sklearn.preprocessing import OrdinalEncoder #—ç–Ω–∫–æ–¥–∏–Ω–≥
from sklearn.preprocessing import StandardScaler #–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
from sklearn.tree import DecisionTreeClassifier #–¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
from sklearn.ensemble import RandomForestClassifier #—Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
from sklearn.linear_model import LogisticRegression #–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
from sklearn.metrics import f1_score
from sklearn.utils import shuffle
from sklearn.metrics import roc_curve
from sklearn.model_selection import cross_val_score
import altair as alt
import time

from IPython.core.display import display, HTML
from IPython.display import display_html
import warnings
warnings.filterwarnings('ignore')

STATE = np.random.RandomState(12345)
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

st.set_page_config(
    page_title="–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded",

)

st.title('–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Ç–∏ –æ—Ç–µ–ª–µ–π ¬´–ö–∞–∫ –≤ –≥–æ—Å—Ç—è—Ö¬ª')

if 'model' not in st.session_state:
    st.session_state['model'] = None

if 'true_uploaded' not in st.session_state:
    st.session_state['true_uploaded'] = False

if 'data' not in st.session_state:
    st.session_state['data'] = None

def do_analis(data, columns):
    st.header('–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
    # for column in columns:
    # st.subheader(f'—Å—Ç–æ–ª–±–µ—Ü - {column}')
    n = pd.DataFrame(st.session_state['data']).shape[0]
    k = data.shape[0]
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f'**–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏ –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Decision Tree**')
        st.write(f'–ü—Ä–∏–±—ã–ª—å –æ—Ç–µ–ª—è - {int(data["profit"].sum())} —Ä—É–±.')
        st.write('')
    with col2:
        st.markdown(f'**–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Decision Tree**')
        st.write(f"–ü—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è DT - {int(data['profit_tree'].sum())} —Ä—É–±.")            
        st.write('')
    with col3:
        st.markdown(f'**–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Decision Tree**')
        st.write(f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –≤—ã–≥–æ–¥–∞ –æ—Ç –æ–±—É—á–µ–Ω–∏—è DT - {int(data['profit_tree'].sum() - data['profit'].sum() - 400000*k/n)} —Ä—É–±.")
        st.write('')
    FP = 0
    FN = 0
    TP = 0
    TN = 0
    for ind in data.index:
        row = data[ind:ind+1]
        predict_t = row['is_canceled_tree'].to_list()[0]
        target_t = row['is_canceled'].to_list()[0]
        if predict_t == target_t:
            if predict_t == 1:
                TP += 1
                profit_pred = row['profit_tree'].to_list()[0]
                profit_true = row['profit'].to_list()[0]
            elif predict_t  == 0:
                TN += 1
        if predict_t != target_t:
            if predict_t == 1:
                FP += 1
            elif predict_t == 0:
                FN += 1   
    sum_pt = FP+FN+TP+TN
    predict_map = {'predict_0': [TN, FN], 'predict_1': [FP, TP]}
    df_predict_map = pd.DataFrame(data=predict_map, index=['target_0', 'target_1'])    
    predict_map_per = (
        {'predict_0': ['{:.2%}'.format(TN/sum_pt), '{:.2%}'.format(FN/sum_pt)], 'predict_1': ['{:.2%}'.format(FP/sum_pt), '{:.2%}'.format(TP/sum_pt)]}
    )
    df_predict_map_per = pd.DataFrame(data=predict_map_per, index=['target_0', 'target_1'])
    st.write(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –æ—Ç –±—Ä–æ–Ω–∏ - {(FN+TP)/sum_pt}')
    st.markdown('**–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—Ä–æ–Ω–∏**')
    col1, col2 = st.columns(2)
    with col1:
        st.write('–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
        st.table(df_predict_map)
    with col2:
        st.write('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
        st.table(df_predict_map_per)

    for column in columns:
        st.subheader(f'—Å—Ç–æ–ª–±–µ—Ü - "{column}"')
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown(f'**–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º "{column}" –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Decision Tree**')
            before_bycolumn =  data.groupby(column)['profit'].sum().astype('int')
            st.dataframe(before_bycolumn)
            st.bar_chart(before_bycolumn)
            st.write('')
        with col2:
            st.markdown(f'**–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º "{column}"  –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Decision Tree**')
            after_bycolumn = data.groupby(column)['profit_tree'].sum().astype('int')
            st.dataframe(after_bycolumn)
            st.bar_chart(after_bycolumn)            
            st.write('')
        with col3:
            st.markdown(f'**–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≤—ã–≥–æ–¥—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º "{column}" –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Decision Tree**')
            st.dataframe(data.groupby(column)['profit'].—Åount())
            profit_bycolumn = int(data.groupby(column)['profit_tree'].sum().astype('int') - data.groupby(column)['profit'].sum().astype('int') - 400000/n*data.groupby(column)['profit'].—Åount())
            profit_bycolumn_df = pd.DataFrame(profit_bycolumn.sort_values(ascending=False), columns=['profit_from_DT'])
            st.dataframe(profit_bycolumn_df)
            st.bar_chart(profit_bycolumn_df)
            st.write('')


if st.session_state['true_uploaded']:
    data = st.session_state['data']
    selected_columns = ['arrival_date_month', 'country', 'customer_type', 'total_nights', 'reserved_room_type', 'meal']
    column = st.radio('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü', selected_columns)
    if column is not None:
        if column == 'arrival_date_month':
            chosen_month = st.selectbox('–ú–µ—Å—è—Ü –∑–∞–µ–∑–¥–∞', data['arrival_date_month'].unique())
            new_data = data.query('arrival_date_month == @chosen_month').reset_index(drop=True)
            non_selected_columns = pd.Series(selected_columns)
            non_selected_columns = non_selected_columns[non_selected_columns != column].to_list()
        elif column == 'country':
            citizen = st.selectbox('–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –ø–æ—Å—Ç–æ—è–ª—å—Ü–∞', data['country'].unique())
            new_data = data.query('country == @citizen').reset_index(drop=True)
            non_selected_columns = pd.Series(selected_columns)
            non_selected_columns = non_selected_columns[non_selected_columns != column].to_list()
        elif column == 'customer_type':
            customer = st.selectbox('–¢–∏–ø –∑–∞–∫–∞–∑—á–∏–∫–∞', data['customer_type'].unique())
            new_data = data.query('customer_type == @customer').reset_index(drop=True)
            non_selected_columns = pd.Series(selected_columns)
            non_selected_columns = non_selected_columns[non_selected_columns != column].to_list()
        elif column == 'total_nights':
            nights = st.selectbox('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π', data['total_nights'].unique())
            new_data = data.query('total_nights == @nights').reset_index(drop=True)
            non_selected_columns = pd.Series(selected_columns)
            non_selected_columns = non_selected_columns[non_selected_columns != column].to_list()
        elif column == 'reserved_room_type':            
            room_type = st.selectbox('–¢–∏–ø –∫–æ–º–Ω–∞—Ç—ã', data['reserved_room_type'].unique())
            new_data = data.query('reserved_room_type == @room_type').reset_index(drop=True)
            non_selected_columns = pd.Series(selected_columns)
            non_selected_columns = non_selected_columns[non_selected_columns != column].to_list()
        elif column == 'meal':            
            book_type = st.selectbox('–û–ø—Ü–∏—è –∑–∞–∫–∞–∑–∞', data['meal'].unique())
            new_data = data.query('meal == @book_type').reset_index(drop=True)
            non_selected_columns = pd.Series(selected_columns)
            non_selected_columns = non_selected_columns[non_selected_columns != column].to_list()
            
        button = st.button('–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑')

        if button:
            do_analis(new_data, non_selected_columns)
else:
    st.error('–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ; –µ—â—ë —Ä–∞–∑ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Ö –≤–æ –≤–∫–ª–∞–¥–∫–µ "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑"')
